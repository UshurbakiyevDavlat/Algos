<?php

class SumRecursion
{
    private function sumFunc(array $arr): int
    {

        // [1,2,3]
        if (count($arr) === 1) { // базовый случай
            return array_pop($arr); // берем 1 элемент с конца массива
        }

        $first = array_shift($arr); // Берем 1 элемент массива с начала

        // 1 + sumFunc([2,3])
        // 2 + sumFunc([3])
        // т.к сработал базовый случай, он возвращаем нам то что осталось т.е 3
        // как итог, 2 + 3 = 5, 1 + 5 = 6

        return $first + $this->sumFunc($arr); // рекурсивный случай
    }

    private function countElems(array $arr): int
    {
        if ($arr === []) { // базовый случай
            return 0;
        }
        array_pop($arr); // забираем элемент с конца

        // [1,2,3]
        // убрали 3 c конца, [1,2]
        // возвращаем сумму 1 + countElems([1,2])
        // [1,2] к базовому случаю не подходят, поэтому дальше
        // удаляем 2, и закидываем сумму 1 + countElems[1]
        // опять не подходит к базовому случаю, поэтому  удаляем 1
        // и возвращаем сумму 1 + countElems([])
        // к базовому случаю подошел поэтому возвращаем 0
        // теперь смотрим порядок выполнения в стеке
        //  1 + 0
        //  1 + 1
        //  1 + 2
        // В итоге вернулось 3.

        return 1 + $this->countElems($arr); // рекурсивный случай
    }

    private function maxValue(array $arr): int
    {
        // [1,2,3,4,5,6,7,8,9,0]

        if ($this->countElems($arr) === 2) { // базовый случай
            if ($arr[0] > $arr[1]) {
                return $arr[0];
            }
            return $arr[1];
        }
        // Напоминание, стек вызовов функций накладывается сверху, а значит здесь порядок выполнения с последней строчки

        // Раз в самом первом вызове вернулось 9 как maxValue, то идет финальное сравнение 1 > 9, нет значит в итоге возвращаем 9
        // Закидываем [2,3,4,5,6,7,8,9,0] maxValue = 9, Проверка 2 > 9, нет возвращаем 9
        // Закидываем [3,4,5,6,7,8,9,0] maxValue = 9, Проверка 3 > 9, нет возвращаем 9
        // Закидываем [4,5,6,7,8,9,0] maxValue = 9, Проверка 4 > 9, нет возвращаем 9
        // Закидываем [5,6,7,8,9,0] maxValue = 9, Проверка 5 > 9, нет возвращаем 9
        // Закидываем [6,7,8,9,0] maxValue = 9, Проверка 6 > 9, нет возвращаем 9
        // Закидываем [7,8,9,0] maxValue = 9, Проверка 7 > 9, нет возвращаем 9
        // Закидываем [8,9,0], maxValue = 9, Далее проверка 8 > 9, нет возвращаем 9
        // Закидываем [9,0], базовый случай возвращает 9 , (Первый по выполнению в стеке фунций)

        $maxValue = $this->maxValue(array_slice($arr, 1)); // рекурсивный случай
        return $arr[0] > $maxValue ? $arr[0] : $maxValue;
    }

    public function main(): void
    {
        $nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
        echo $this->sumFunc($nums) . PHP_EOL;
        echo $this->countElems($nums) . PHP_EOL;
        echo $this->maxValue($nums) . PHP_EOL;
    }
}

$sum = new SumRecursion();
$sum->main();