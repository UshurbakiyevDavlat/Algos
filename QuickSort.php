<?php

class QuickSort
{
    private function quickSortFunc(array $arr): array
    {
        //в целом сортировка работает так что мы выбираем базовый случай в данном случае это массив где 1 или 0 элементов
        //выбираем опорный элемент от которого будем смотреть
        //разбиваем массив на два подмассива , меньшие и большие опорного элемента
        //в рекурсивном случае мержим вызов функции на массив меньших, массив из пивот элемента, вызов функции на массив больших


        //[10,5,2,3] флоу
        // 10 - опорный элемент
        // [5,2,3] массив меньших
        // [] массив больших (пустой больше не будет упоминаться)
        // вызовы будут делаться только на массив меньших, так как массив больших пуст

        // следующий вызов в стеке
        // 5 - опорный элемент
        // [2,3] массив меньших

        // 2 - опорный
        // [3] массив больших

        // базовый случай возвращает 3
        // [] + [2] + [3]
        // [2,3] + [5] + []
        // [2,3,5] + [10] + []

        if (count($arr) < 2) { // базовый случай
            return $arr;
        }

        $pivot = $arr[0]; // опорный элемент

        $less = array_values(array_filter($arr, function ($item) use ($pivot) {
            return $item < $pivot; // делаем фильтрацию, и заполняем массив теми элементами, что меньше опорного.
        }));

        $greater = array_values(array_filter($arr, function ($item) use ($pivot) {
            return $item > $pivot; // делаем фильтрацию, и заполняем массив теми элементами, что больше опорного.
        }));

        //так как у массивов в результате одинаковые индексы, мержить их лучше через функцию мержа массива
        //в ином случае индексы будут затирать друг друга

        return array_merge($this->quickSortFunc($less), [$pivot], $this->quickSortFunc($greater));
    }

    public function main(): void
    {
        $arr = [10, 5, 2, 3];
        print_r($this->quickSortFunc($arr));
    }
}

$sorted = new QuickSort();
$sorted->main();